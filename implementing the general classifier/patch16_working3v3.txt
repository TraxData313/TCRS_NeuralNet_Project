#include <FreqMeasure.h>

/*
PATCH CODE:
- INPUTS: 9, 10, 11
- OUTPUTS: 2, 3, 4  
- REWARD (-): A0
- REWARD (+): A1
NOTE: PULL_DOWN all inputs!
*/
// - PINS:
const int inputPin1  = 9;
const int inputPin2  = 10;
const int inputPin3  = 11;
const int outputPin1 = 2;
const int outputPin2 = 3;
const int outputPin3 = 4;
const int clockPin = 12;

// - Parameters:
const int input_size = 3;
const int output_size = 3;
int const init_EF_resist = 0;
int const max_EF_resist  = 100;
const float min_PF = 0.05; // !
const float max_PF = 0.9;
const float min_weight_value = -2;
const float max_weight_value = 2;
const int D_restst = 5;

// - Variables:
int EF_resist = init_EF_resist;
int i, j; 
float sum_orRand;
bool clockBool = 1;
float reward_positive, reward_negative, reward;
bool is_rewarded = 0;
bool input_difference = 1;

// - Vectors:
bool input_F_vector[input_size], old_input_F_vector[input_size];
float ESF_vector[input_size]; // E(source F)
bool output_F_vector[output_size];
float output_PF_vector[output_size];
float output_EF_vector[output_size];

// - Matrices:
float ERp_matrix[input_size][output_size];
float ERn_matrix[input_size][output_size];
float EC_matrix[input_size][output_size];


void setup() {
  Serial.begin(9600);
  randomSeed(analogRead(0));  
  Serial.println("Initializing Cell Patch");
  
  pinMode(LED_BUILTIN, OUTPUT);
  pinMode(clockPin, INPUT);
  // - Define the input pins:
  pinMode(inputPin1, INPUT);
  pinMode(inputPin2, INPUT);
  pinMode(inputPin3, INPUT);
  // - Define the output pins:
  pinMode(outputPin1, OUTPUT);
  pinMode(outputPin2, OUTPUT);
  pinMode(outputPin3, OUTPUT);
  
  digitalWrite(outputPin1, HIGH);
  digitalWrite(outputPin2, HIGH);
  digitalWrite(outputPin3, HIGH);
  
  // - Initialize the connection matrix:
  for (i = 0; i < input_size; i++){
    for (j = 0; j < output_size; j++){
      ERp_matrix[i][j] = 0.00;
      ERn_matrix[i][j] = 0.00;
    }
  }
}

void loop() {

  // - Measure the clock:
  clockBool = digitalRead(clockPin); delay(1);
  
  // - Keep measuring the input if clock=0, check for difference:
  if(clockBool == 0){
    // - Measure the iput:
    input_F_vector[0] = digitalRead(inputPin1); delay(1);
    input_F_vector[1] = digitalRead(inputPin2); delay(1);
    input_F_vector[2] = digitalRead(inputPin3); delay(1);
    // -- Compare the new and old imputs:
    for (i = 0; i < input_size; i++){
      if(old_input_F_vector[i] != input_F_vector[i]){input_difference = 1;}
    }
    // -- Save the old_input_F_vector:
    for (i = 0; i < input_size; i++){
      old_input_F_vector[i] = input_F_vector[i];
    }
  }
  
  
  // - INPUT CLOCK:
  if (clockBool == 0 and input_difference == 1){
    
    //digitalWrite(LED_BUILTIN, clockBool); // LED
    
    // -- Print out input:
    Serial.println(" ");
    Serial.println(" ");
    Serial.println(" ");
    Serial.println("- Inputs:");
    Serial.println(input_F_vector[0]);
    Serial.println(input_F_vector[1]);
    Serial.println(input_F_vector[2]);
    
    // -- Run the connections:
    for (i = 0; i < input_size; i++){
      for (j = 0; j < output_size; j++){
        //output_PF_vector[j] += input_vector[i]*weight_matrix[i][j];
        if (input_F_vector[i] == 1){
          output_PF_vector[j] += (ERp_matrix[i][j]-ERn_matrix[i][j])*(1 - EC_matrix[i][j]);
        }
      }
    }
    
    // --- Refire the cells (provide the output):
    Serial.println(" ");
    Serial.println("- Outputs:");
    
    for (i = 0; i < output_size; i++){
      sum_orRand = random(0, 1000);
      
      // --- normalize:
      if (output_PF_vector[i] < min_PF){output_PF_vector[i] = min_PF;}
      else if (output_PF_vector[i] > max_PF){output_PF_vector[i] = max_PF;}
      Serial.print("PF:");
      Serial.println(output_PF_vector[i]);
      
      // --- refire:
      if (sum_orRand < output_PF_vector[i]*1000){
        output_F_vector[i] = 1;
        digitalWrite(i+2, HIGH);
      }
      else{
        output_F_vector[i] = 0;
        digitalWrite(i+2, LOW);
      }
      Serial.print("F/!F:");
      Serial.println(output_F_vector[i]);
    }
    
    
    // --- Update the EFs:
    for (i = 0; i < output_size; i++){
      output_EF_vector[i] = ((output_EF_vector[i]*EF_resist) + output_F_vector[i])/(EF_resist+1);
    }
    // --- Increase the EF_resist:
    EF_resist += 1;
    if (EF_resist > max_EF_resist){EF_resist = max_EF_resist;}
    
    // -- Change the state:
    is_rewarded = 0;
    input_difference = 0;
    
    
    
    
  // - OUTPUT CLOCK:
  }else if (clockBool == 1 and is_rewarded == 0){
    
    //digitalWrite(LED_BUILTIN, clockBool); // LED
    
    // -- Provide output:
    digitalWrite(outputPin1, output_F_vector[0]); delay(1);
    digitalWrite(outputPin2, output_F_vector[1]); delay(1);
    digitalWrite(outputPin3, output_F_vector[2]); delay(1);
    Serial.println(" ");
    Serial.println("- Provided outputs:");
    Serial.println(output_F_vector[0]);
    Serial.println(output_F_vector[1]);
    Serial.println(output_F_vector[2]);
    delay(5); // 5ms delay
    
    // - Reset the output_PF_vector:
    for (i=0; i<output_size; i++){
      output_PF_vector[i] = 0;
    }
    
    // -- Measure the reward:
    sum_orRand = 0;
    for(i=0;i<1000;i++){
      sum_orRand += analogRead(A1);
    } 
    reward_positive = sum_orRand/700000;
    sum_orRand = 0;
    for(i=0;i<1000;i++){
      sum_orRand += analogRead(A0);
    }
    reward_negative = sum_orRand/700000;
    reward = reward_positive - reward_negative;
    Serial.print("- Reward (+): ");
    Serial.println(reward_positive);
    Serial.print("- Reward (-): ");
    Serial.println(reward_negative);
    Serial.print("- Total Reward: ");
    Serial.println(reward);
    
    // -- LED = Reward:
    if(reward > 0){
      digitalWrite(LED_BUILTIN, HIGH);
    }else{
      digitalWrite(LED_BUILTIN, LOW);
    }
    
    
    // -- Update the connections FRF:
    for (i = 0; i < input_size; i++){
      // --- Update the ESF:
      ESF_vector[i] =  ((ESF_vector[i]*D_restst) + input_F_vector[i])/(D_restst+1);
      
      for (j = 0; j < output_size; j++){
        // --- Update the EC:
        //COV = ( (input_vector[i]-ESF_vector[i])*(output_F_vector[j]-output_EF_vector[j]) ) ;
        EC_matrix[i][j] = ((EC_matrix[i][j]*D_restst) + ( (input_F_vector[i]-ESF_vector[i])*(output_F_vector[j]-output_EF_vector[j]) ))/(D_restst+1);
        
        // --- Bound -1 < EC < 1 !!!
        if (EC_matrix[i][j] > 1){EC_matrix[i][j]=1;}
        else if (EC_matrix[i][j] < -1){EC_matrix[i][j]=-1;}
        
        // --- Update ERp and ERn:
        if (input_F_vector[i] == 1){
          if (output_F_vector[j] == 1){
            ERp_matrix[i][j] = ((ERp_matrix[i][j]*D_restst) + reward)/(D_restst+1);
          }
          else {
            ERn_matrix[i][j] = ((ERn_matrix[i][j]*D_restst) + reward)/(D_restst+1);
          }
        }
      }
    }
    
    // -- Change the state:
    is_rewarded = 1;
    input_difference = 1;
    }
  
  } // END LOOP