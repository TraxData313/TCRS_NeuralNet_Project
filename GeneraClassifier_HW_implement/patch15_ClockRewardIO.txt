#include <FreqMeasure.h>

/*
PATCH CODE:
- INPUTS: 9, 10, 11
- OUTPUTS: 2, 3, 4
- REWARD (-): A0
- REWARD (+): A1
*/
// - PINS:
const int inputPin1  = 9;
const int inputPin2  = 10;
const int inputPin3  = 11;
const int outputPin1 = 2;
const int outputPin2 = 3;
const int outputPin3 = 4;
const int clockPin = 12;

// - Variables and constants:
int i; 
float sum;
bool clockBool = 1;
const int input_size = 3;
const int output_size = 3;
bool input_F_vector[input_size], old_input_F_vector[input_size];
bool output_F_vector[output_size];
float reward_positive, reward_negative, reward;
bool is_rewarded = 0;
bool input_difference = 1;


void setup() {
  Serial.begin(9600);
  FreqMeasure.begin();
  
  pinMode(LED_BUILTIN, OUTPUT);
  pinMode(clockPin, INPUT);
  // - Define the input pins:
  pinMode(inputPin1, INPUT);
  pinMode(inputPin2, INPUT);
  pinMode(inputPin3, INPUT);
  // - Define the output pins:
  pinMode(outputPin1, OUTPUT);
  pinMode(outputPin2, OUTPUT);
  pinMode(outputPin3, OUTPUT);
  
  digitalWrite(outputPin1, HIGH);
  digitalWrite(outputPin2, HIGH);
  digitalWrite(outputPin3, HIGH);
}

void loop() {

  clockBool = digitalRead(clockPin); delay(1);
  // Serial.print("CLOCK: ");
  // Serial.println(clockBool);
  digitalWrite(LED_BUILTIN, clockBool);
  
  // -- Compare the new and old imputs:
  for (i = 0; i < input_size; i++){
    if(old_input_F_vector[i] != input_F_vector[i]){input_difference = 1;}
  }
  
  // -- Save the old_input_F_vector:
  for (i = 0; i < input_size; i++){
    old_input_F_vector[i] = input_F_vector[i];
  }
  
  if (clockBool == 0 and input_difference == 1){
    // -- Get input:
    input_F_vector[0] = digitalRead(inputPin1); delay(1);
    input_F_vector[1] = digitalRead(inputPin2); delay(1);
    input_F_vector[2] = digitalRead(inputPin3); delay(1);
    Serial.println(" ");
    Serial.println("- Inputs:");
    Serial.println(input_F_vector[0]);
    Serial.println(input_F_vector[1]);
    Serial.println(input_F_vector[2]);
    // -- Change the state:
    is_rewarded = 0;
    input_difference = 0;
    
  }else if (clockBool == 1 and is_rewarded == 0){
    
    // Define the output vector:
    for (i=0; i<input_size; i++){
      output_F_vector[i] = input_F_vector[i];
    }
    
    // -- Provide output:
    digitalWrite(outputPin1, output_F_vector[0]); delay(1);
    digitalWrite(outputPin2, output_F_vector[1]); delay(1);
    digitalWrite(outputPin3, output_F_vector[2]); delay(1);
    Serial.println(" ");
    Serial.println("- Outputs:");
    Serial.println(output_F_vector[0]);
    Serial.println(output_F_vector[1]);
    Serial.println(output_F_vector[2]);
    delay(2); // 2ms delay
    
    // -- Get the reward:
    sum = 0;
    for(i=0;i<1000;i++){
      sum += analogRead(A0);
    }
    reward_positive = sum/700000;
    sum = 0;
    for(i=0;i<1000;i++){
      sum += analogRead(A1);
    }
    reward_negative = sum/700000;
    reward = reward_positive - reward_negative;
    Serial.print("- Reward (+): ");
    Serial.println(reward_positive);
    Serial.print("- Reward (-): ");
    Serial.println(reward_negative);
    Serial.print("- Total Reward: ");
    Serial.println(reward);

    // -- Change the state:
    is_rewarded = 1;
    input_difference = 1;
    }
  
  } // END LOOP